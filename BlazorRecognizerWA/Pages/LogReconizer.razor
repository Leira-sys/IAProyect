@page "/log"
@using BlazorRecognizerWA.Models;
@inject HttpClient Http
@inject IJSRuntime JSRuntime



<table class="table">
    <tr>
        <th>ID</th>
        <th>TIPO</th>
        <th>DESCRIPCION</th>
        <th>FECHA</th>
    </tr>
    @foreach (var item in logs)
    {
        <tr>
            <td>@item.Id</td>
            <td>@item.Tipo</td>
            <td>@item.Descripcion</td>
            <td>@item.FechaHora</td>

            @*          <td>
        <a href="clienteForm/@item.Id">Editar</a>
        <a href="cliente/eliminar/@item.Id">Eliminar</a>
        </td> *@
        </tr>
    }
</table>

<button @onclick="Descargar" class="btn btn-primary"> Descargar en excel</button>

@code {
    public string Url = "/getLogsAzure";
    public List<LogAzure> logs = new List<LogAzure>();

    protected override async Task OnInitializedAsync() =>
    logs = await Http.GetFromJsonAsync<List<LogAzure>>(Url);

    private async Task Descargar()
    {
        try
        {
            Controllers.ExcelController excelController = new Controllers.ExcelController();

            var result = await excelController.ExportarLogsAExcel(logs);

            var content = await result.Content.ReadAsByteArrayAsync();
            var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            var fileName = $"Logs_{DateTime.Now:yyyy-MM-dd}.xlsx";

            var base64 = Convert.ToBase64String(content);
            await JSRuntime.InvokeVoidAsync("downloadFile", base64, fileName, contentType);
        }
        catch (Exception ex)
        {

            throw;
        }

    }
}
